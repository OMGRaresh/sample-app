name: MyNebo-CI/CD-Pipeline
env:
  AWS_REGION_NAME: "ue-central-1"
  DOCKER IMAGE_NAME: "FlaskAPP-"

on:
  push:
    # Match all branches *without* a / in the name.
    # This will exclude "sub" branches, such as "feature branches",
    # named something like: "feature/my-feature". Those branches will
    # likely contain "work in progress" code, so we will run the tests
    # on the local machine and avoid using up GitHub Actions credits
    # (if applicable, such as in `private` repositories).
    # Filter syntax info: https://docs.github.com/en/free-pro-team@latest/actions/reference/workflow-syntax-for-github-actions#filter-pattern-cheat-sheet
    branches:
      - 'stage'
  pull_request:
    # Since pull requests come from "third parties", we will automatically
    # test everything coming from the outside world, for good measure.
    # The `branches` tag could also be omitted, yielding the same effect here.
    branches:
      - 'stage'


jobs:
  # Run code tests before building the image, to ensure it is good to go
  testing_step:
    name: Run code tests
    runs-on: ubuntu-latest


    steps:

    - uses: actions/checkout@v2
    - name: Use Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '16'
    - name: Setting up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.8

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Initalize and seed the database
      run: |
        flask db upgrade
        python seed.py
    - name: Lint the code with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Test with unittest
      run: |
        python -m unittest discover
        echo "Testing finished successfully"
  # Build and push the Docker image

  building_step:
    name: AWS connections and building img
    runs-on: ubuntu-latest


    steps:
    - name: Configure AWS connections
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{secrets.MY_PRIVATE_AWS_ACCESS_KEY_ID}}
        aws-secret-access-key: ${{secrets.MY_PRIVATE_AWS_SECRET_ACCESS_KEY}}
        aws-region: ${{env.AWS_REGION_NAME}}
    - name: Ds
      run: aws s3 ls s3://coe-internal-oec-config
